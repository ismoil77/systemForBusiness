// api.js ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å API –∏ –∂—É—Ä–Ω–∞–ª–æ–º –¥–µ–π—Å—Ç–≤–∏–π

// === 1. –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï URL (–ë–ï–ó –ü–†–û–ë–ï–õ–û–í!) ===
let Api = 'https://7cf074eeac80e141.mokky.dev/DilobarQurbanova';
let Api2 = 'https://7cf074eeac80e141.mokky.dev/MamatkulovMurodullo';

// === 2. –ì–õ–û–ë–ê–õ–¨–ù–´–ï –≠–õ–ï–ú–ï–ù–¢–´ ===
const odamSelect = document.querySelector('.odam');
const allCreditElement = document.querySelector('.allCredit');

// === 3. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
const getCurrentUser = () => odamSelect.value; // "Dilobar" –∏–ª–∏ "Murodullo"
/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∂—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π
 * @param {string|null} dateFilter ‚Äî —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'
 * @returns {Promise<Array>} ‚Äî –º–∞—Å—Å–∏–≤ –∑–∞–ø–∏—Å–µ–π
 */
export async function getActivityLog(dateFilter = null) {
	if (!navigator.onLine) {
		alert('–ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞. –ñ—É—Ä–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
		return [];
	}

	try {
		const response = await fetch(ACTIVITY_LOG_API);
		if (!response.ok) throw new Error(`HTTP ${response.status}`);

		let logs = await response.json();

		// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞)
		if (dateFilter) {
			logs = logs.filter(entry => {
				const entryDate = new Date(entry.timestamp).toISOString().split('T')[0];
				return entryDate === dateFilter;
			});
		}

		return logs;
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∂—É—Ä–Ω–∞–ª–∞:', error);
		alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∂—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π');
		return [];
	}
}
// –ú–µ–Ω—è–µ–º API –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
odamSelect.addEventListener('change', () => {
	Api = getCurrentUser() === 'Murodullo' ? Api2 : 'https://7cf074eeac80e141.mokky.dev/DilobarQurbanova';
	if (navigator.onLine) {
		getData();
	}
});

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∏–∑ dom.js
import { getDataToTable } from './dom.js';

// === 4. –ñ–£–†–ù–ê–õ –î–ï–ô–°–¢–í–ò–ô ===
const ACTIVITY_LOG_API = 'https://7cf074eeac80e141.mokky.dev/activityLog';

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π
 * @param {string} action ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
 */
// –í api.js ‚Äî –∑–∞–º–µ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é logActivity –Ω–∞ —ç—Ç—É:

/**
 * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∂—É—Ä–Ω–∞–ª
 * @param {string} action ‚Äî –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º
 */
// –í api.js

let _cachedLog = null; // –∫—ç—à –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤

/**
 * –£–º–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª: –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –¥–∞—Ç–µ
 * @param {string} action ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
 */
// –í api.js


export async function logActivity(action) {
	if (!navigator.onLine) return;

	// const today = new Date().toLocaleDateString('ru-RU');
	const today = new Date().toISOString().split('T')[0];
	const time = new Date().toLocaleTimeString('ru-RU')+` ${new Date().toLocaleDateString('ru-RU')}`;
	const user = getCurrentUser();

	try {
		if (!_cachedLog) {
			const response = await fetch(ACTIVITY_LOG_API);
			_cachedLog = await response.json();
		}

		let todayEntry = _cachedLog.find(item => item.date === today);

		if (todayEntry) {
			// –ò–°–ü–†–ê–í–õ–ï–ù–û: PATCH –≤–º–µ—Å—Ç–æ PUT
			todayEntry.actions.push({ time, user, action });
			const response = await fetch(`${ACTIVITY_LOG_API}/${todayEntry.id}`, {
				method: 'PATCH', // ‚Üê –í–û–¢ –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify(todayEntry)
			});
			if (!response.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å');
		} else {
			const newEntry = {
				date: today,
				actions: [{ time, user, action }]
			};
			const response = await fetch(ACTIVITY_LOG_API, {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify(newEntry)
			});
			const created = await response.json();
			_cachedLog.push(created);
		}

	} catch (err) {
		console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∂—É—Ä–Ω–∞–ª–∞:', err);
		_cachedLog = null; // —Å–±—Ä–æ—Å –∫—ç—à–∞
	}
}

// === 5. –û–°–ù–û–í–ù–´–ï API-–§–£–ù–ö–¶–ò–ò ===

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
 */
export async function getData() {
	if (!navigator.onLine) return;

	try {
		const response = await fetch(Api);
		if (!response.ok) throw new Error(`HTTP ${response.status}`);

		const data = await response.json();

		// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
		getDataToTable(data);

		// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –¥–æ–ª–≥
		const totalDebt = data.reduce((sum, client) => sum + (parseFloat(client.credit) || 0), 0);
		allCreditElement.innerHTML = `<span>“ö–∞—Ä–∑: ${Math.round(totalDebt)} —Å–æ–º–æ–Ω–∏</span>`;

	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
		// –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º alert ‚Äî —ç—Ç–æ –º–µ—à–∞–µ—Ç —Ä–∞–±–æ—Ç–µ
	}
}

/**
 * –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏
 */
export async function searching(searchTerm) {
	if (!navigator.onLine || !searchTerm.trim()) {
		if (!searchTerm.trim()) {
			getData(); // –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö
		}
		return;
	}

	try {
		const response = await fetch(`${Api}?client=${encodeURIComponent(searchTerm)}`);
		if (!response.ok) throw new Error(`HTTP ${response.status}`);

		const data = await response.json();
		getDataToTable(data);
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
	}
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
 * @param {Object} data ‚Äî –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
 */
export async function postData(data) {
	if (!navigator.onLine) {
		alert('üö´ –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.');
		return false;
	}

	try {
		const response = await fetch(Api, {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify(data)
		});

		if (!response.ok) {
			const errorMsg = `HTTP ${response.status}`;
			console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', errorMsg);
			alert('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.');
			return false;
		}
		getData()
		const result = await response.json();
		await logActivity(`–î–æ–±–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç: ${result.client}`);
		return true; // —É—Å–ø–µ—Ö

	} catch (error) {
		console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏:', error);
		alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
		return false;
	}
}

/**
 * –£–¥–∞–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞
 * @param {string} id ‚Äî ID –∫–ª–∏–µ–Ω—Ç–∞
 * @param {string} clientName ‚Äî –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ (–¥–ª—è –ª–æ–≥–∞)
 */
export async function deleteData(id, clientName, phone = '') {
	if (!navigator.onLine) {
		alert('üö´ –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞. –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.');
		return false;
	}

	try {
		const response = await fetch(`${Api}/${id}`, { method: 'DELETE' });

		if (!response.ok) {
			console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', `HTTP ${response.status}`);
			alert('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞.');
			return false;
		}

		// ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
		await logActivity(`–£–¥–∞–ª–∏–ª –∫–ª–∏–µ–Ω—Ç–∞ "${clientName}" (—Ç–µ–ª–µ—Ñ–æ–Ω: ${phone || '‚Äî'})`);
		getData(); // –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
		return true;

	} catch (error) {
		console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', error);
		alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏.');
		return false;
	}
}
/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
 * @param {string} id ‚Äî ID –∫–ª–∏–µ–Ω—Ç–∞
 * @param {Object} data ‚Äî –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
export async function putData(id, data) {
	if (!navigator.onLine) {
		alert('üö´ –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞. –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.');
		return false;
	}

	try {
		const response = await fetch(`${Api}/${id}`, {
			method: 'PATCH', // ‚Üê –í–û–¢ –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify(data)
		});

		if (!response.ok) {
			alert('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.');
			return false;
		}

		getData(); // –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
		return true;

	} catch (error) {
		alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏.');
		return false;
	}
}
// –í api.js
export async function updateInvoicesForClient(clientId, newClientName) {
	if (!navigator.onLine) return;

	try {
		const response = await fetch(`https://7cf074eeac80e141.mokky.dev/invoice?clientId=${clientId}`);
		if (!response.ok) {
			console.warn('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞–∫–ª–∞–¥–Ω—ã–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:', clientId);
			return;
		}
		const records = await response.json();

		for (const record of records) {
			const updateRes = await fetch(`https://7cf074eeac80e141.mokky.dev/invoice/${record.id}`, {
				method: 'PATCH',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify({ clientName: newClientName })
			});
			if (!updateRes.ok) {
				console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–º—è –≤ –Ω–∞–∫–ª–∞–¥–Ω–æ–π ID:', record.id);
			}
		}
	} catch (err) {
		console.error('–û—à–∏–±–∫–∞ –≤ updateInvoicesForClient:', err);
		// –ù–ï –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É ‚Äî —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
	}
}